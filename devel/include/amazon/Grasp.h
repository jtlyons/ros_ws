// Generated by gencpp from file amazon/Grasp.msg
// DO NOT EDIT!


#ifndef AMAZON_MESSAGE_GRASP_H
#define AMAZON_MESSAGE_GRASP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace amazon
{
template <class ContainerAllocator>
struct Grasp_
{
  typedef Grasp_<ContainerAllocator> Type;

  Grasp_()
    : object_id(0)
    , grasp_point()  {
    }
  Grasp_(const ContainerAllocator& _alloc)
    : object_id(0)
    , grasp_point(_alloc)  {
    }



   typedef int64_t _object_id_type;
  _object_id_type object_id;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _grasp_point_type;
  _grasp_point_type grasp_point;




  typedef boost::shared_ptr< ::amazon::Grasp_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::amazon::Grasp_<ContainerAllocator> const> ConstPtr;

}; // struct Grasp_

typedef ::amazon::Grasp_<std::allocator<void> > Grasp;

typedef boost::shared_ptr< ::amazon::Grasp > GraspPtr;
typedef boost::shared_ptr< ::amazon::Grasp const> GraspConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::amazon::Grasp_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::amazon::Grasp_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace amazon

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'amazon': ['/home/tyler/ros_ws/src/amazon/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::amazon::Grasp_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::amazon::Grasp_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::amazon::Grasp_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::amazon::Grasp_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::amazon::Grasp_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::amazon::Grasp_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::amazon::Grasp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f1f713ed6e6433c0c4c83a5a25edd36b";
  }

  static const char* value(const ::amazon::Grasp_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf1f713ed6e6433c0ULL;
  static const uint64_t static_value2 = 0xc4c83a5a25edd36bULL;
};

template<class ContainerAllocator>
struct DataType< ::amazon::Grasp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "amazon/Grasp";
  }

  static const char* value(const ::amazon::Grasp_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::amazon::Grasp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 object_id\n\
geometry_msgs/Point grasp_point\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::amazon::Grasp_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::amazon::Grasp_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.object_id);
      stream.next(m.grasp_point);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Grasp_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::amazon::Grasp_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::amazon::Grasp_<ContainerAllocator>& v)
  {
    s << indent << "object_id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.object_id);
    s << indent << "grasp_point: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.grasp_point);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AMAZON_MESSAGE_GRASP_H
